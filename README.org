#+TITLE: Cytoscape component for JustPy

This is a component for [[https://justpy.io][JustPy]] to place a [[https://js.cytoscape.org][Cytoscape]] graph on a page and interact with it.

Base libs:

- [[https://js.cytoscape.org][Cytoscape.js]]
- [[https://justpy.io][JustPy]]


* Installation

Place the javascript component in your applications =/static/components/= directory (the default is the directory the application is run form).

Place the python module ~jpcytoscape.py~ somewhere on your python's =PATH=.

* Basic Usage

Define a list of nodes and edges, some styling directives, and the layout. Add the component as you would any other ~JustPy~ component.

#+begin_src python
import justpy as jp
from jpcytoscape import Cytoscape

elements = [
    {'data': { 'id': 'a' }},
    {'data': { 'id': 'b' }},
    {'data': { 'id': 'c' }},
    {'data': { 'id': 'ab', 'source': 'a', 'target': 'b' }},
    {'data': { 'id': 'ac', 'source': 'a', 'target': 'c' }},
  ]

graphstyle = [
    {'selector': 'node',
      'style': {
        'label': 'data(id)'
      }},
    {'selector': 'edge',
      'style': {
        'width': 3,
        'target-arrow-shape': 'triangle',
      }},
  ]

layout = {'name': 'grid', 'rows': 2}

def cyto_test():
    wp = jp.WebPage()
    wp.head_html = '''
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cytoscape/3.21.1/cytoscape.min.js"></script>
    '''
    cyto = Cytoscape(a=wp,
                     style = 'background-color: #fefefe; border: 1px solid; width: 400px; height: 400px;',
                     classes='m-2',
                     elements = elements,
                     graphstyle = graphstyle,
                     layout = layout,
                     )
    return wp

jp.justpy(cyto_test)
#+end_src

* Calling cytoscape methods

Two methods are defined on ~Cytoscape~ class for calling the underlying ~js~ methods. The ~run_method~ function (from ~JustPy~) and ~run_method_get_output~ for collecting results. N.B. you must bind the ~WebPage~'s 'result_ready' event to ~cyto.handle_page_event~ to receive output.

e.g. adding a button to reset zoom and pan:
#+begin_src python
async def button_click(self, msg):
    await msg.page.cyto.run_method('reset()', msg.websocket)

def cyto_test():
    wp = jp.WebPage()
    wp.head_html = '''
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cytoscape/3.21.1/cytoscape.min.js"></script>
    '''
    wp.cyto = Cytoscape(a=wp,
                     style = 'background-color: #fefefe; border: 1px solid; width: 400px; height: 400px;',
                     classes='m-2',
                     elements = elements,
                     graphstyle = graphstyle,
                     layout = layout,
                     )
    button_classes = 'w-32 mr-2 mb-2 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-full'
    b = jp.Button(text=f'Reset zoom', a=wp, classes=button_classes, click=button_click)

    # Need the folowing if using cyto.run_method_get_output:
    wp.on('result_ready', wp.cyto.handle_page_event)

    return wp

jp.justpy(cyto_test)
#+end_src

#+RESULTS:

Pass in parameters by structuring the argument of the method as a string.
e.g.
#+begin_src python
async def button_click(self, msg):
    cy = msg.page.cyto
    ws = msg.websocket
    await cy.run_method('zoom(2)', ws)
    await cy.run_method("layout({'name':'random'}).run()", ws)
    x = 100
    y = 10
    await cy.run_method(f'pan({{x:{x}, y:{y}}})', ws)
#+end_src

Use ~run_method_get_output~ to obtain the output. Stacking function calls and using selectors works. Remember to bind 'result_ready' to ~cyto.handle_page_event~.

e.g.
#+begin_src python
async def button_click(self, msg):
    cy = msg.page.cyto
    ws = msg.websocket
    a=await cy.run_method_get_output('json()', ws)
    a=await cy.run_method_get_output('getElementById("a").position()', ws)
    a=await cy.run_method_get_output('$("#a").position()', ws)
#+end_src

* Events

To bind to Cytoscape events, first list the event in the attribute ~allowed_events~ then use ~on()~. e.g.
#+begin_src python
async def pos_changed(self, msg):
    target = msg.target_id
    pos = await msg.page.cyto.run_method_get_output(f'getElementById("{target}").position()', msg.websocket)
    print(f'Node "{target}" moved to {pos}')

def cyto_test():
    wp = jp.WebPage()
    wp.head_html = '''
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cytoscape/3.21.1/cytoscape.min.js"></script>
    '''
    wp.cyto = Cytoscape(a=wp,
                     style = 'background-color: #fefefe; border: 1px solid; width: 400px; height: 400px;',
                     classes='m-2',
                     elements = elements,
                     graphstyle = graphstyle,
                     layout = layout,
                     allowed_events = ['free'],
                     )

    wp.cyto.on('free', pos_changed)
    wp.on('result_ready', wp.cyto.handle_page_event)
    return wp

jp.justpy(cyto_test)
#+end_src

:Node "a" moved to {'x': 131.17751479289942, 'y': 123.07396449704142}
